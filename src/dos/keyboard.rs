#[repr(u8)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]
pub enum Scancode {
    Escape = 0x01,
    One,
    Two,
    Three,
    Four,
    Five,
    Six,
    Seven,
    Eight,
    Nine,
    Zero,
    Minus,
    Equals,
    Backspace,
    Tab,
    Q,
    W,
    E,
    R,
    T,
    Y,
    U,
    I,
    O,
    P,
    LeftBracket,
    RightBracket,
    Enter,
    Control,
    A,
    S,
    D,
    F,
    G,
    H,
    J,
    K,
    L,
    Semicolon,
    Quote,
    Tilde,
    LShift,
    Backslash,
    Z,
    X,
    C,
    V,
    B,
    N,
    M,
    Comma,
    Period,
    Slash,
    RShift,
    Multiply,
    Alt,
    Space,
    Capslock,
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    Numlock,
    Scolllock,
    Home,
    Up,
    PageUp,
    Left = 0x4B,
    Clear,
    Right,
    Plus,
    End,
    Down,
    PageDown,
    Insert,
    Delete,
    F11,
    F12,
    LWin = 0x5B,
    RWin,
    Menu,
}

impl TryFrom<u8> for Scancode {
    type Error = ();

    fn try_from(value: u8) -> Result<Self, Self::Error> {
        match value {
            0x01..=0x58 | 0x5B..=0x5D => {
                let sc = unsafe { core::mem::transmute(value) };
                Ok(sc)
            },
            _ => Err(())
        }
    }
}
